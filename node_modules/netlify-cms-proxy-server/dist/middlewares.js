#!/usr/bin/env node
module.exports=function(e){var t={};function a(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,a),r.l=!0,r.exports}return a.m=e,a.c=t,a.d=function(e,t,i){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(a.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)a.d(i,r,function(t){return e[t]}.bind(null,r));return i},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=21)}([function(e,t){e.exports=require("path")},function(e,t){e.exports=require("fs")},function(e,t,a){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.joi=t.defaultSchema=void 0;const r=i(a(3)),s=["info","entriesByFolder","entriesByFiles","getEntry","unpublishedEntries","unpublishedEntry","unpublishedEntryDataFile","unpublishedEntryMediaFile","deleteUnpublishedEntry","persistEntry","updateUnpublishedEntryStatus","publishUnpublishedEntry","getMedia","getMediaFile","persistMedia","deleteFile","getDeployPreview"],n=r.default.string().required(),o=r.default.number().required(),l=r.default.bool().required(),c=n,d=n;t.defaultSchema=({path:e=n}={})=>{const t=r.default.object({branch:n}),a=r.default.object({path:e,content:n,encoding:n.valid("base64")}),i=r.default.when("action",{switch:[{is:"info",then:r.default.allow()},{is:"entriesByFolder",then:t.keys({folder:e,extension:n,depth:o}).required()},{is:"entriesByFiles",then:t.keys({files:r.default.array().items(r.default.object({path:e,label:r.default.string()})).required()})},{is:"getEntry",then:t.keys({path:e}).required()},{is:"unpublishedEntries",then:t.keys({branch:n}).required()},{is:"unpublishedEntry",then:t.keys({id:r.default.string().optional(),collection:r.default.string().optional(),slug:r.default.string().optional()}).required()},{is:"unpublishedEntryDataFile",then:t.keys({collection:c,slug:d,id:n,path:n}).required()},{is:"unpublishedEntryMediaFile",then:t.keys({collection:c,slug:d,id:n,path:n}).required()},{is:"deleteUnpublishedEntry",then:t.keys({collection:c,slug:d}).required()},{is:"persistEntry",then:t.keys({entry:r.default.object({slug:n,path:e,raw:n,newPath:e.optional()}).required(),assets:r.default.array().items(a).required(),options:r.default.object({collectionName:r.default.string(),commitMessage:n,useWorkflow:l,status:n}).required()}).required()},{is:"updateUnpublishedEntryStatus",then:t.keys({collection:c,slug:d,newStatus:n}).required()},{is:"publishUnpublishedEntry",then:t.keys({collection:c,slug:d}).required()},{is:"getMedia",then:t.keys({mediaFolder:e}).required()},{is:"getMediaFile",then:t.keys({path:e}).required()},{is:"persistMedia",then:t.keys({asset:a.required(),options:r.default.object({commitMessage:n}).required()}).required()},{is:"deleteFile",then:t.keys({path:e,options:r.default.object({commitMessage:n}).required()}).required()},{is:"getDeployPreview",then:t.keys({collection:c,slug:d}).required()}],otherwise:r.default.forbidden()});return r.default.object({action:r.default.valid(...s).required(),params:i})},t.joi=e=>(t,a,i)=>{const{error:r}=e.validate(t.body,{allowUnknown:!0});if(r){const{details:e}=r,t=e.map(e=>e.message).join(",");a.status(422).json({error:t})}else i()}},function(e,t){e.exports=require("@hapi/joi")},function(e,t,a){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.pathTraversal=void 0;const r=i(a(3)),s=i(a(0));t.pathTraversal=e=>r.default.extend({type:"path",base:r.default.string().required(),messages:{"path.invalid":"{{#label}} must resolve to a path under the configured repository"},validate(t,a){if(!s.default.join(e,t).startsWith(e))return{value:t,errors:a.error("path.invalid")}}}).path()},function(e,t,a){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.move=t.deleteFile=t.writeFile=t.listRepoFiles=void 0;const r=i(a(0)),s=a(1),n=async(e,t,a)=>{if(a<=0)return[];try{const i=await s.promises.readdir(e,{withFileTypes:!0}),o=await Promise.all(i.map(i=>{const s=r.default.join(e,i.name);return i.isDirectory()?n(s,t,a-1):[s].filter(e=>e.endsWith(t))}));return[].concat(...o)}catch(e){return[]}};t.listRepoFiles=async(e,t,a,i)=>(await n(r.default.join(e,t),a,i)).map(t=>t.substr(e.length+1)),t.writeFile=async(e,t)=>{await s.promises.mkdir(r.default.dirname(e),{recursive:!0}),await s.promises.writeFile(e,t)},t.deleteFile=async(e,t)=>{await s.promises.unlink(r.default.join(e,t))};const o=async(e,t)=>{await s.promises.mkdir(r.default.dirname(t),{recursive:!0}),await s.promises.rename(e,t)};t.move=async(e,t)=>{await o(e,t);const a=r.default.dirname(e),i=r.default.dirname(t),s=await n(a,"",100);await Promise.all(s.map(e=>o(e,e.replace(a,i))))}},function(e,t,a){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.readMediaFile=t.entriesFromFiles=void 0;const r=i(a(15)),s=i(a(0)),n=a(1),o=e=>r.default.createHash("sha256").update(e).digest("hex"),l=e=>e.replace(/\\/g,"/");t.entriesFromFiles=async(e,t)=>Promise.all(t.map(async t=>{try{const a=await n.promises.readFile(s.default.join(e,t.path));return{data:a.toString(),file:{path:l(t.path),label:t.label,id:o(a)}}}catch(e){return{data:null,file:{path:l(t.path),label:t.label,id:null}}}})),t.readMediaFile=async(e,t)=>{const a=await n.promises.readFile(s.default.join(e,t));return{id:o(a),content:a.toString("base64"),encoding:"base64",path:l(t),name:s.default.basename(t)}}},function(e,t){e.exports=require("express")},function(e,t,a){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.registerCommonMiddlewares=void 0;const r=i(a(7)),s=i(a(9)),n=i(a(10));t.registerCommonMiddlewares=(e,t)=>{const{logger:a}=t,i={write:e=>{a.debug(String(e).trim())}};e.use(s.default("combined",{stream:i})),e.use(n.default()),e.use(r.default.json({limit:"50mb"}))}},function(e,t){e.exports=require("morgan")},function(e,t){e.exports=require("cors")},function(e,t,a){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.registerMiddleware=t.localGitMiddleware=t.getSchema=t.validateRepo=void 0;const r=i(a(0)),s=a(1),n=a(12),o=a(13),l=a(2),c=i(a(14)),d=a(4),u=a(5),p=a(6),f=async(e,t)=>{await e.add("."),await e.commit(t,void 0,{"--no-verify":!0,"--no-gpg-sign":!0})},h=async e=>await e.branchLocal().then(e=>e.current),m=async(e,t,a)=>{const i=await h(e);try{i!==t&&await e.checkout(t);return await a()}finally{await e.checkout(i)}},g=e=>`branch.${e}.description`,y=async(e,t,a,i,s)=>{await u.writeFile(r.default.join(t,a.path),a.raw),await Promise.all(i.map(e=>u.writeFile(r.default.join(t,e.path),Buffer.from(e.content,e.encoding)))),a.newPath&&await u.move(r.default.join(t,a.path),r.default.join(t,a.newPath)),await f(e,s)},w=async(e,t)=>await e.branchLocal().then(({all:e})=>e.includes(t)),b=async(e,t,a)=>{const i=await e.diff([t,a]);return o.parse(i).map(e=>{var t,a;const i=(null===(t=e.oldPath)||void 0===t?void 0:t.replace(/b\//,""))||"",r=(null===(a=e.newPath)||void 0===a?void 0:a.replace(/b\//,""))||"",s=r||i;return{oldPath:i,newPath:r,status:e.status,newFile:"added"===e.status,path:s,id:s,binary:e.binary||/.svg$/.test(s)}})};t.validateRepo=async({repoPath:e})=>{const t=c.default(e).silent(!1);if(!await t.checkIsRepo())throw Error(e+" is not a valid git repository")},t.getSchema=({repoPath:e})=>l.defaultSchema({path:d.pathTraversal(e)}),t.localGitMiddleware=({repoPath:e,logger:t})=>{const a=c.default(e).silent(!1);return async function(i,o){try{const{body:t}=i;if("info"===t.action)return void o.json({repo:r.default.basename(e),publish_modes:["simple","editorial_workflow"],type:"local_git"});const{branch:l}=t.params;if(!await w(a,l)){const e=`Default branch '${l}' doesn't exist`;return void o.status(422).json({error:e})}switch(t.action){case"entriesByFolder":{const i=t.params,{folder:r,extension:s,depth:n}=i,c=await m(a,l,()=>u.listRepoFiles(e,r,s,n).then(t=>p.entriesFromFiles(e,t.map(e=>({path:e})))));o.json(c);break}case"entriesByFiles":{const i=t.params,r=await m(a,l,()=>p.entriesFromFiles(e,i.files));o.json(r);break}case"getEntry":{const i=t.params,[r]=await m(a,l,()=>p.entriesFromFiles(e,[{path:i.path}]));o.json(r);break}case"unpublishedEntries":{const e=await a.branchLocal().then(e=>e.all.filter(e=>e.startsWith(n.CMS_BRANCH_PREFIX+"/")));o.json(e.map(n.contentKeyFromBranch));break}case"unpublishedEntry":{let{id:e,collection:i,slug:r}=t.params;e&&({collection:i,slug:r}=n.parseContentKey(e));const s=n.generateContentKey(i,r),c=n.branchFromContentKey(s);if(!await w(a,c))return o.status(404).json({message:"Not Found"});{const e=await b(a,l,c),t=await a.raw(["config",g(c)]),s={collection:i,slug:r,status:t&&n.labelToStatus(t.trim()),diffs:e};o.json(s)}break}case"unpublishedEntryDataFile":{const{path:i,collection:r,slug:s}=t.params,l=n.generateContentKey(r,s),c=n.branchFromContentKey(l),[d]=await m(a,c,()=>p.entriesFromFiles(e,[{path:i}]));o.json({data:d.data});break}case"unpublishedEntryMediaFile":{const{path:i,collection:r,slug:s}=t.params,l=n.generateContentKey(r,s),c=n.branchFromContentKey(l),d=await m(a,c,()=>p.readMediaFile(e,i));o.json(d);break}case"deleteUnpublishedEntry":{const{collection:e,slug:i}=t.params,r=n.generateContentKey(e,i),s=n.branchFromContentKey(r);await h(a)===s&&await a.checkoutLocalBranch(l),await a.branch(["-D",s]),o.json({message:"deleted branch: "+s});break}case"persistEntry":{const{entry:i,assets:c,options:d}=t.params;if(d.useWorkflow){const t=i.slug,o=d.collectionName,u=n.generateContentKey(o,t),p=n.branchFromContentKey(u);await m(a,l,async()=>{const t=await w(a,p);t?await a.checkout(p):await a.checkoutLocalBranch(p),await(async(e,t)=>{const a=await e.raw(["config","commit.gpgsign"]);try{"true"===a&&await e.addConfig("commit.gpgsign","false"),await e.rebase([t,"--no-verify"])}finally{"true"===a&&await e.addConfig("commit.gpgsign",a)}})(a,l);const o=(await b(a,l,p)).filter(e=>e.binary&&!c.map(e=>e.path).includes(e.path));if(await Promise.all(o.map(t=>s.promises.unlink(r.default.join(e,t.path)))),await y(a,e,i,c,d.commitMessage),!t){const e=n.statusToLabel(d.status);await a.addConfig(g(p),e)}})}else await m(a,l,async()=>{await y(a,e,i,c,d.commitMessage)});o.json({message:"entry persisted"});break}case"updateUnpublishedEntryStatus":{const{collection:e,slug:i,newStatus:r}=t.params,s=n.generateContentKey(e,i),c=n.branchFromContentKey(s),d=n.statusToLabel(r);await a.addConfig(g(c),d),o.json({message:`${l} description was updated to ${d}`});break}case"publishUnpublishedEntry":{const{collection:e,slug:i}=t.params,r=n.generateContentKey(e,i),s=n.branchFromContentKey(r);await(async(e,t,a)=>{const i=await e.raw(["config","commit.gpgsign"]);try{"true"===i&&await e.addConfig("commit.gpgsign","false"),await e.mergeFromTo(t,a)}finally{"true"===i&&await e.addConfig("commit.gpgsign",i)}})(a,s,l),await a.deleteLocalBranch(s),o.json({message:`branch ${s} merged to ${l}`});break}case"getMedia":{const{mediaFolder:i}=t.params,r=await m(a,l,async()=>{const t=await u.listRepoFiles(e,i,"",1);return await Promise.all(t.map(t=>p.readMediaFile(e,t)))});o.json(r);break}case"getMediaFile":{const{path:i}=t.params,r=await m(a,l,()=>p.readMediaFile(e,i));o.json(r);break}case"persistMedia":{const{asset:i,options:{commitMessage:s}}=t.params,n=await m(a,l,async()=>(await u.writeFile(r.default.join(e,i.path),Buffer.from(i.content,i.encoding)),await f(a,s),p.readMediaFile(e,i.path)));o.json(n);break}case"deleteFile":{const{path:i,options:{commitMessage:n}}=t.params;await m(a,l,async()=>{await s.promises.unlink(r.default.join(e,i)),await f(a,n)}),o.json({message:"deleted file "+i});break}case"getDeployPreview":o.json(null);break;default:{const e="Unknown action "+t.action;o.status(422).json({error:e});break}}}catch(e){t.error(`Error handling ${JSON.stringify(i.body)}: ${e.message}`),o.status(500).json({error:"Unknown error"})}}},t.registerMiddleware=async(e,a)=>{const{logger:i}=a,s=r.default.resolve(process.env.GIT_REPO_DIRECTORY||process.cwd());await t.validateRepo({repoPath:s}),e.post("/api/v1",l.joi(t.getSchema({repoPath:s}))),e.post("/api/v1",t.localGitMiddleware({repoPath:s,logger:i})),i.info("Netlify CMS Git Proxy Server configured with "+s)}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.branchFromContentKey=t.contentKeyFromBranch=t.parseContentKey=t.generateContentKey=t.statusToLabel=t.labelToStatus=t.isCMSLabel=t.MERGE_COMMIT_MESSAGE=t.DEFAULT_PR_BODY=t.CMS_BRANCH_PREFIX=void 0,t.CMS_BRANCH_PREFIX="cms",t.DEFAULT_PR_BODY="Automatically generated by Netlify CMS",t.MERGE_COMMIT_MESSAGE="Automatically generated. Merged on Netlify CMS.";t.isCMSLabel=e=>e.startsWith("netlify-cms/"),t.labelToStatus=e=>e.substr("netlify-cms/".length),t.statusToLabel=e=>"netlify-cms/"+e,t.generateContentKey=(e,t)=>`${e}/${t}`,t.parseContentKey=e=>{const t=e.indexOf("/");return{collection:e.substr(0,t),slug:e.substr(t+1)}},t.contentKeyFromBranch=e=>e.substring((t.CMS_BRANCH_PREFIX+"/").length),t.branchFromContentKey=e=>`${t.CMS_BRANCH_PREFIX}/${e}`},function(e,t){e.exports=require("what-the-diff")},function(e,t){e.exports=require("simple-git/promise")},function(e,t){e.exports=require("crypto")},function(e,t,a){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.registerMiddleware=t.getSchema=t.localFsMiddleware=void 0;const r=i(a(0)),s=a(2),n=a(4),o=a(5),l=a(6);t.localFsMiddleware=({repoPath:e,logger:t})=>async function(a,i){try{const{body:t}=a;switch(t.action){case"info":i.json({repo:r.default.basename(e),publish_modes:["simple"],type:"local_fs"});break;case"entriesByFolder":{const a=t.params,{folder:r,extension:s,depth:n}=a,c=await o.listRepoFiles(e,r,s,n).then(t=>l.entriesFromFiles(e,t.map(e=>({path:e}))));i.json(c);break}case"entriesByFiles":{const a=t.params,r=await l.entriesFromFiles(e,a.files);i.json(r);break}case"getEntry":{const a=t.params,[r]=await l.entriesFromFiles(e,[{path:a.path}]);i.json(r);break}case"persistEntry":{const{entry:a,assets:s}=t.params;await o.writeFile(r.default.join(e,a.path),a.raw),await Promise.all(s.map(t=>o.writeFile(r.default.join(e,t.path),Buffer.from(t.content,t.encoding)))),a.newPath&&await o.move(r.default.join(e,a.path),r.default.join(e,a.newPath)),i.json({message:"entry persisted"});break}case"getMedia":{const{mediaFolder:a}=t.params,r=await o.listRepoFiles(e,a,"",1),s=await Promise.all(r.map(t=>l.readMediaFile(e,t)));i.json(s);break}case"getMediaFile":{const{path:a}=t.params,r=await l.readMediaFile(e,a);i.json(r);break}case"persistMedia":{const{asset:a}=t.params;await o.writeFile(r.default.join(e,a.path),Buffer.from(a.content,a.encoding));const s=await l.readMediaFile(e,a.path);i.json(s);break}case"deleteFile":{const{path:a}=t.params;await o.deleteFile(e,a),i.json({message:"deleted file "+a});break}case"getDeployPreview":i.json(null);break;default:{const e="Unknown action "+t.action;i.status(422).json({error:e});break}}}catch(e){t.error(`Error handling ${JSON.stringify(a.body)}: ${e.message}`),i.status(500).json({error:"Unknown error"})}},t.getSchema=({repoPath:e})=>s.defaultSchema({path:n.pathTraversal(e)}),t.registerMiddleware=async(e,a)=>{const{logger:i}=a,n=r.default.resolve(process.env.GIT_REPO_DIRECTORY||process.cwd());e.post("/api/v1",s.joi(t.getSchema({repoPath:n}))),e.post("/api/v1",t.localFsMiddleware({repoPath:n,logger:i})),i.info("Netlify CMS File System Proxy Server configured with "+n)}},function(e,t,a){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.createLogger=void 0;const r=i(a(18)),{combine:s,colorize:n,simple:o}=r.default.format;t.createLogger=({level:e})=>r.default.createLogger({level:e,format:s(n(),o()),transports:[new r.default.transports.Console]})},function(e,t){e.exports=require("winston")},,,function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.registerLocalFs=t.registerLocalGit=void 0;const i=a(8),r=a(11),s=a(16),n=a(17),o=e=>({logger:n.createLogger({level:e.logLevel||"info"})});t.registerLocalGit=async(e,t={})=>{const a=o(t);i.registerCommonMiddlewares(e,a),await r.registerMiddleware(e,a)},t.registerLocalFs=async(e,t={})=>{const a=o(t);i.registerCommonMiddlewares(e,a),await s.registerMiddleware(e,a)}}]);
//# sourceMappingURL=middlewares.js.map