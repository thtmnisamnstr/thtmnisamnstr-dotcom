{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"path\"","webpack:///external \"fs\"","webpack:///./src/middlewares/joi/index.ts","webpack:///external \"@hapi/joi\"","webpack:///./src/middlewares/joi/customValidators.ts","webpack:///./src/middlewares/utils/fs.ts","webpack:///./src/middlewares/utils/entries.ts","webpack:///external \"express\"","webpack:///./src/middlewares/common/index.ts","webpack:///external \"morgan\"","webpack:///external \"cors\"","webpack:///./src/middlewares/localGit/index.ts","webpack:///../netlify-cms-lib-util/src/APIUtils.ts","webpack:///external \"what-the-diff\"","webpack:///external \"simple-git/promise\"","webpack:///external \"crypto\"","webpack:///./src/middlewares/localFs/index.ts","webpack:///./src/middlewares.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","allowedActions","requiredString","string","required","requiredNumber","number","requiredBool","bool","collection","slug","defaultSchema","path","defaultParams","branch","asset","content","encoding","valid","params","when","switch","is","then","allow","keys","folder","extension","depth","files","array","items","label","id","optional","entry","raw","newPath","assets","options","collectionName","commitMessage","useWorkflow","status","newStatus","mediaFolder","otherwise","forbidden","action","joi","schema","req","res","next","error","validate","body","allowUnknown","details","message","map","join","json","pathTraversal","repoPath","extend","type","base","messages","helpers","startsWith","errors","listFiles","async","dir","dirents","readdir","withFileTypes","Promise","all","dirent","isDirectory","filter","f","endsWith","concat","e","listRepoFiles","substr","length","writeFile","filePath","mkdir","dirname","recursive","deleteFile","unlink","moveFile","from","to","rename","move","sourceDir","destDir","allFiles","file","replace","sha256","buffer","createHash","update","digest","normalizePath","entriesFromFiles","readFile","data","toString","readMediaFile","basename","registerCommonMiddlewares","app","use","limit","commit","git","add","undefined","getCurrentBranch","branchLocal","summary","current","runOnBranch","func","currentBranch","checkout","branchDescription","commitEntry","a","Buffer","isBranchExists","includes","getDiffs","source","dest","rawDiff","diff","parse","oldPath","newFile","binary","test","validateRepo","silent","checkIsRepo","Error","getSchema","localGitMiddleware","repo","publish_modes","payload","entries","cmsBranches","result","b","CMS_BRANCH_PREFIX","contentKeyFromBranch","parseContentKey","contentKey","generateContentKey","cmsBranch","branchFromContentKey","diffs","unpublishedEntry","labelToStatus","trim","checkoutLocalBranch","branchExists","gpgSign","addConfig","rebase","toDelete","description","statusToLabel","mergeFromTo","merge","deleteLocalBranch","mediaFiles","mediaFile","console","JSON","stringify","registerMiddleware","resolve","process","env","GIT_REPO_DIRECTORY","cwd","post","log","DEFAULT_PR_BODY","MERGE_COMMIT_MESSAGE","isCMSLabel","index","indexOf","substring","localFsMiddleware","registerLocalGit","registerLocalFs"],"mappings":"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","file":"middlewares.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 19);\n","module.exports = require(\"path\");","module.exports = require(\"fs\");","import express from 'express';\nimport Joi from '@hapi/joi';\n\nconst allowedActions = [\n  'info',\n  'entriesByFolder',\n  'entriesByFiles',\n  'getEntry',\n  'unpublishedEntries',\n  'unpublishedEntry',\n  'unpublishedEntryDataFile',\n  'unpublishedEntryMediaFile',\n  'deleteUnpublishedEntry',\n  'persistEntry',\n  'updateUnpublishedEntryStatus',\n  'publishUnpublishedEntry',\n  'getMedia',\n  'getMediaFile',\n  'persistMedia',\n  'deleteFile',\n  'getDeployPreview',\n];\n\nconst requiredString = Joi.string().required();\nconst requiredNumber = Joi.number().required();\nconst requiredBool = Joi.bool().required();\n\nconst collection = requiredString;\nconst slug = requiredString;\n\nexport const defaultSchema = ({ path = requiredString } = {}) => {\n  const defaultParams = Joi.object({\n    branch: requiredString,\n  });\n\n  const asset = Joi.object({\n    path,\n    content: requiredString,\n    encoding: requiredString.valid('base64'),\n  });\n\n  const params = Joi.when('action', {\n    switch: [\n      {\n        is: 'info',\n        then: Joi.allow(),\n      },\n      {\n        is: 'entriesByFolder',\n        then: defaultParams\n          .keys({\n            folder: path,\n            extension: requiredString,\n            depth: requiredNumber,\n          })\n          .required(),\n      },\n      {\n        is: 'entriesByFiles',\n        then: defaultParams.keys({\n          files: Joi.array()\n            .items(Joi.object({ path, label: Joi.string() }))\n            .required(),\n        }),\n      },\n      {\n        is: 'getEntry',\n        then: defaultParams\n          .keys({\n            path,\n          })\n          .required(),\n      },\n      {\n        is: 'unpublishedEntries',\n        then: defaultParams.keys({ branch: requiredString }).required(),\n      },\n      {\n        is: 'unpublishedEntry',\n        then: defaultParams\n          .keys({\n            id: Joi.string().optional(),\n            collection: Joi.string().optional(),\n            slug: Joi.string().optional(),\n          })\n          .required(),\n      },\n      {\n        is: 'unpublishedEntryDataFile',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n            id: requiredString,\n            path: requiredString,\n          })\n          .required(),\n      },\n      {\n        is: 'unpublishedEntryMediaFile',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n            id: requiredString,\n            path: requiredString,\n          })\n          .required(),\n      },\n      {\n        is: 'deleteUnpublishedEntry',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n      {\n        is: 'persistEntry',\n        then: defaultParams\n          .keys({\n            entry: Joi.object({\n              slug: requiredString,\n              path,\n              raw: requiredString,\n              newPath: path.optional(),\n            }).required(),\n            assets: Joi.array()\n              .items(asset)\n              .required(),\n            options: Joi.object({\n              collectionName: Joi.string(),\n              commitMessage: requiredString,\n              useWorkflow: requiredBool,\n              status: requiredString,\n            }).required(),\n          })\n          .required(),\n      },\n      {\n        is: 'updateUnpublishedEntryStatus',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n            newStatus: requiredString,\n          })\n          .required(),\n      },\n      {\n        is: 'publishUnpublishedEntry',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n      {\n        is: 'getMedia',\n        then: defaultParams\n          .keys({\n            mediaFolder: path,\n          })\n          .required(),\n      },\n      {\n        is: 'getMediaFile',\n        then: defaultParams\n          .keys({\n            path,\n          })\n          .required(),\n      },\n      {\n        is: 'persistMedia',\n        then: defaultParams\n          .keys({\n            asset: asset.required(),\n            options: Joi.object({\n              commitMessage: requiredString,\n            }).required(),\n          })\n          .required(),\n      },\n      {\n        is: 'deleteFile',\n        then: defaultParams\n          .keys({\n            path,\n            options: Joi.object({\n              commitMessage: requiredString,\n            }).required(),\n          })\n          .required(),\n      },\n      {\n        is: 'getDeployPreview',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n    ],\n    otherwise: Joi.forbidden(),\n  });\n\n  return Joi.object({\n    action: Joi.valid(...allowedActions).required(),\n    params,\n  });\n};\n\nexport const joi = (schema: Joi.Schema) => (\n  req: express.Request,\n  res: express.Response,\n  next: express.NextFunction,\n) => {\n  const { error } = schema.validate(req.body, { allowUnknown: true });\n  if (error) {\n    const { details } = error;\n    const message = details.map(i => i.message).join(',');\n    res.status(422).json({ error: message });\n  } else {\n    next();\n  }\n};\n","module.exports = require(\"@hapi/joi\");","import Joi from '@hapi/joi';\nimport path from 'path';\n\nexport const pathTraversal = (repoPath: string) =>\n  Joi.extend({\n    type: 'path',\n    base: Joi.string().required(),\n    messages: {\n      'path.invalid': '{{#label}} must resolve to a path under the configured repository',\n    },\n    validate(value, helpers) {\n      const resolvedPath = path.join(repoPath, value);\n      if (!resolvedPath.startsWith(repoPath)) {\n        return { value, errors: helpers.error('path.invalid') };\n      }\n    },\n  }).path();\n","import path from 'path';\nimport { promises as fs } from 'fs';\n\nconst listFiles = async (dir: string, extension: string, depth: number): Promise<string[]> => {\n  if (depth <= 0) {\n    return [];\n  }\n\n  try {\n    const dirents = await fs.readdir(dir, { withFileTypes: true });\n    const files = await Promise.all(\n      dirents.map(dirent => {\n        const res = path.join(dir, dirent.name);\n        return dirent.isDirectory()\n          ? listFiles(res, extension, depth - 1)\n          : [res].filter(f => f.endsWith(extension));\n      }),\n    );\n    return ([] as string[]).concat(...files);\n  } catch (e) {\n    return [];\n  }\n};\n\nexport const listRepoFiles = async (\n  repoPath: string,\n  folder: string,\n  extension: string,\n  depth: number,\n) => {\n  const files = await listFiles(path.join(repoPath, folder), extension, depth);\n  return files.map(f => f.substr(repoPath.length + 1));\n};\n\nexport const writeFile = async (filePath: string, content: Buffer | string) => {\n  await fs.mkdir(path.dirname(filePath), { recursive: true });\n  await fs.writeFile(filePath, content);\n};\n\nexport const deleteFile = async (repoPath: string, filePath: string) => {\n  await fs.unlink(path.join(repoPath, filePath));\n};\n\nconst moveFile = async (from: string, to: string) => {\n  await fs.mkdir(path.dirname(to), { recursive: true });\n  await fs.rename(from, to);\n};\n\nexport const move = async (from: string, to: string) => {\n  // move file\n  await moveFile(from, to);\n\n  // move children\n  const sourceDir = path.dirname(from);\n  const destDir = path.dirname(to);\n  const allFiles = await listFiles(sourceDir, '', 100);\n  await Promise.all(allFiles.map(file => moveFile(file, file.replace(sourceDir, destDir))));\n};\n","import crypto from 'crypto';\nimport path from 'path';\nimport { promises as fs } from 'fs';\n\nconst sha256 = (buffer: Buffer) => {\n  return crypto\n    .createHash('sha256')\n    .update(buffer)\n    .digest('hex');\n};\n\n// normalize windows os path format\nconst normalizePath = (path: string) => path.replace(/\\\\/g, '/');\n\nexport const entriesFromFiles = async (\n  repoPath: string,\n  files: { path: string; label?: string }[],\n) => {\n  return Promise.all(\n    files.map(async file => {\n      try {\n        const content = await fs.readFile(path.join(repoPath, file.path));\n        return {\n          data: content.toString(),\n          file: { path: normalizePath(file.path), label: file.label, id: sha256(content) },\n        };\n      } catch (e) {\n        return {\n          data: null,\n          file: { path: normalizePath(file.path), label: file.label, id: null },\n        };\n      }\n    }),\n  );\n};\n\nexport const readMediaFile = async (repoPath: string, file: string) => {\n  const encoding = 'base64';\n  const buffer = await fs.readFile(path.join(repoPath, file));\n  const id = sha256(buffer);\n\n  return {\n    id,\n    content: buffer.toString(encoding),\n    encoding,\n    path: normalizePath(file),\n    name: path.basename(file),\n  };\n};\n","module.exports = require(\"express\");","import express from 'express';\nimport morgan from 'morgan';\nimport cors from 'cors';\n\nexport const registerCommonMiddlewares = (app: express.Express) => {\n  app.use(morgan('combined'));\n  app.use(cors());\n  app.use(express.json({ limit: '50mb' }));\n};\n","module.exports = require(\"morgan\");","module.exports = require(\"cors\");","import express from 'express';\nimport path from 'path';\nimport { promises as fs } from 'fs';\nimport {\n  branchFromContentKey,\n  generateContentKey,\n  contentKeyFromBranch,\n  CMS_BRANCH_PREFIX,\n  statusToLabel,\n  labelToStatus,\n  parseContentKey,\n} from 'netlify-cms-lib-util/src/APIUtils';\nimport { parse } from 'what-the-diff';\nimport { defaultSchema, joi } from '../joi';\nimport {\n  EntriesByFolderParams,\n  EntriesByFilesParams,\n  GetEntryParams,\n  DefaultParams,\n  UnpublishedEntryParams,\n  PersistEntryParams,\n  GetMediaParams,\n  Asset,\n  PublishUnpublishedEntryParams,\n  PersistMediaParams,\n  DeleteFileParams,\n  UpdateUnpublishedEntryStatusParams,\n  Entry,\n  GetMediaFileParams,\n  DeleteEntryParams,\n  UnpublishedEntryDataFileParams,\n  UnpublishedEntryMediaFileParams,\n} from '../types';\n// eslint-disable-next-line import/default\nimport simpleGit from 'simple-git/promise';\nimport { pathTraversal } from '../joi/customValidators';\nimport { listRepoFiles, writeFile, move } from '../utils/fs';\nimport { entriesFromFiles, readMediaFile } from '../utils/entries';\n\nconst commit = async (git: simpleGit.SimpleGit, commitMessage: string) => {\n  await git.add('.');\n  await git.commit(commitMessage, undefined, {\n    '--no-verify': true,\n    '--no-gpg-sign': true,\n  });\n};\n\nconst getCurrentBranch = async (git: simpleGit.SimpleGit) => {\n  const currentBranch = await git.branchLocal().then(summary => summary.current);\n  return currentBranch;\n};\n\nconst runOnBranch = async <T>(git: simpleGit.SimpleGit, branch: string, func: () => Promise<T>) => {\n  const currentBranch = await getCurrentBranch(git);\n  try {\n    if (currentBranch !== branch) {\n      await git.checkout(branch);\n    }\n    const result = await func();\n    return result;\n  } finally {\n    await git.checkout(currentBranch);\n  }\n};\n\nconst branchDescription = (branch: string) => `branch.${branch}.description`;\n\ntype Options = {\n  repoPath: string;\n};\n\nconst commitEntry = async (\n  git: simpleGit.SimpleGit,\n  repoPath: string,\n  entry: Entry,\n  assets: Asset[],\n  commitMessage: string,\n) => {\n  // save entry content\n  await writeFile(path.join(repoPath, entry.path), entry.raw);\n  // save assets\n  await Promise.all(\n    assets.map(a => writeFile(path.join(repoPath, a.path), Buffer.from(a.content, a.encoding))),\n  );\n  if (entry.newPath) {\n    await move(path.join(repoPath, entry.path), path.join(repoPath, entry.newPath));\n  }\n\n  // commits files\n  await commit(git, commitMessage);\n};\n\nconst rebase = async (git: simpleGit.SimpleGit, branch: string) => {\n  const gpgSign = await git.raw(['config', 'commit.gpgsign']);\n  try {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', 'false');\n    }\n    await git.rebase([branch, '--no-verify']);\n  } finally {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', gpgSign);\n    }\n  }\n};\n\nconst merge = async (git: simpleGit.SimpleGit, from: string, to: string) => {\n  const gpgSign = await git.raw(['config', 'commit.gpgsign']);\n  try {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', 'false');\n    }\n    await git.mergeFromTo(from, to);\n  } finally {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', gpgSign);\n    }\n  }\n};\n\nconst isBranchExists = async (git: simpleGit.SimpleGit, branch: string) => {\n  const branchExists = await git.branchLocal().then(({ all }) => all.includes(branch));\n  return branchExists;\n};\n\nconst getDiffs = async (git: simpleGit.SimpleGit, source: string, dest: string) => {\n  const rawDiff = await git.diff([source, dest]);\n  const diffs = parse(rawDiff).map(d => {\n    const oldPath = d.oldPath?.replace(/b\\//, '') || '';\n    const newPath = d.newPath?.replace(/b\\//, '') || '';\n    const path = newPath || (oldPath as string);\n    return {\n      oldPath,\n      newPath,\n      status: d.status,\n      newFile: d.status === 'added',\n      path,\n      id: path,\n      binary: d.binary || /.svg$/.test(path),\n    };\n  });\n  return diffs;\n};\n\nexport const validateRepo = async ({ repoPath }: Options) => {\n  const git = simpleGit(repoPath).silent(false);\n  const isRepo = await git.checkIsRepo();\n  if (!isRepo) {\n    throw Error(`${repoPath} is not a valid git repository`);\n  }\n};\n\nexport const getSchema = ({ repoPath }: Options) => {\n  const schema = defaultSchema({ path: pathTraversal(repoPath) });\n  return schema;\n};\n\nexport const localGitMiddleware = ({ repoPath }: Options) => {\n  const git = simpleGit(repoPath).silent(false);\n\n  return async function(req: express.Request, res: express.Response) {\n    try {\n      const { body } = req;\n      if (body.action === 'info') {\n        res.json({\n          repo: path.basename(repoPath),\n          // eslint-disable-next-line @typescript-eslint/camelcase\n          publish_modes: ['simple', 'editorial_workflow'],\n          type: 'local_git',\n        });\n        return;\n      }\n      const { branch } = body.params as DefaultParams;\n\n      const branchExists = await isBranchExists(git, branch);\n      if (!branchExists) {\n        const message = `Default branch '${branch}' doesn't exist`;\n        res.status(422).json({ error: message });\n        return;\n      }\n\n      switch (body.action) {\n        case 'entriesByFolder': {\n          const payload = body.params as EntriesByFolderParams;\n          const { folder, extension, depth } = payload;\n          const entries = await runOnBranch(git, branch, () =>\n            listRepoFiles(repoPath, folder, extension, depth).then(files =>\n              entriesFromFiles(\n                repoPath,\n                files.map(file => ({ path: file })),\n              ),\n            ),\n          );\n          res.json(entries);\n          break;\n        }\n        case 'entriesByFiles': {\n          const payload = body.params as EntriesByFilesParams;\n          const entries = await runOnBranch(git, branch, () =>\n            entriesFromFiles(repoPath, payload.files),\n          );\n          res.json(entries);\n          break;\n        }\n        case 'getEntry': {\n          const payload = body.params as GetEntryParams;\n          const [entry] = await runOnBranch(git, branch, () =>\n            entriesFromFiles(repoPath, [{ path: payload.path }]),\n          );\n          res.json(entry);\n          break;\n        }\n        case 'unpublishedEntries': {\n          const cmsBranches = await git\n            .branchLocal()\n            .then(result => result.all.filter(b => b.startsWith(`${CMS_BRANCH_PREFIX}/`)));\n          res.json(cmsBranches.map(contentKeyFromBranch));\n          break;\n        }\n        case 'unpublishedEntry': {\n          let { id, collection, slug } = body.params as UnpublishedEntryParams;\n          if (id) {\n            ({ collection, slug } = parseContentKey(id));\n          }\n          const contentKey = generateContentKey(collection as string, slug as string);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const branchExists = await isBranchExists(git, cmsBranch);\n          if (branchExists) {\n            const diffs = await getDiffs(git, branch, cmsBranch);\n            const label = await git.raw(['config', branchDescription(cmsBranch)]);\n            const status = label && labelToStatus(label.trim());\n            const unpublishedEntry = {\n              collection,\n              slug,\n              status,\n              diffs,\n            };\n            res.json(unpublishedEntry);\n          } else {\n            return res.status(404).json({ message: 'Not Found' });\n          }\n          break;\n        }\n        case 'unpublishedEntryDataFile': {\n          const { path, collection, slug } = body.params as UnpublishedEntryDataFileParams;\n          const contentKey = generateContentKey(collection as string, slug as string);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const [entry] = await runOnBranch(git, cmsBranch, () =>\n            entriesFromFiles(repoPath, [{ path }]),\n          );\n          res.json({ data: entry.data });\n          break;\n        }\n        case 'unpublishedEntryMediaFile': {\n          const { path, collection, slug } = body.params as UnpublishedEntryMediaFileParams;\n          const contentKey = generateContentKey(collection as string, slug as string);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const file = await runOnBranch(git, cmsBranch, () => readMediaFile(repoPath, path));\n          res.json(file);\n          break;\n        }\n        case 'deleteUnpublishedEntry': {\n          const { collection, slug } = body.params as DeleteEntryParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const currentBranch = await getCurrentBranch(git);\n          if (currentBranch === cmsBranch) {\n            await git.checkoutLocalBranch(branch);\n          }\n          await git.branch(['-D', cmsBranch]);\n          res.json({ message: `deleted branch: ${cmsBranch}` });\n          break;\n        }\n        case 'persistEntry': {\n          const { entry, assets, options } = body.params as PersistEntryParams;\n          if (!options.useWorkflow) {\n            await runOnBranch(git, branch, async () => {\n              await commitEntry(git, repoPath, entry, assets, options.commitMessage);\n            });\n          } else {\n            const slug = entry.slug;\n            const collection = options.collectionName as string;\n            const contentKey = generateContentKey(collection, slug);\n            const cmsBranch = branchFromContentKey(contentKey);\n            await runOnBranch(git, branch, async () => {\n              const branchExists = await isBranchExists(git, cmsBranch);\n              if (branchExists) {\n                await git.checkout(cmsBranch);\n              } else {\n                await git.checkoutLocalBranch(cmsBranch);\n              }\n              await rebase(git, branch);\n              const diffs = await getDiffs(git, branch, cmsBranch);\n              // delete media files that have been removed from the entry\n              const toDelete = diffs.filter(\n                d => d.binary && !assets.map(a => a.path).includes(d.path),\n              );\n              await Promise.all(toDelete.map(f => fs.unlink(path.join(repoPath, f.path))));\n              await commitEntry(git, repoPath, entry, assets, options.commitMessage);\n\n              // add status for new entries\n              if (!branchExists) {\n                const description = statusToLabel(options.status);\n                await git.addConfig(branchDescription(cmsBranch), description);\n              }\n            });\n          }\n          res.json({ message: 'entry persisted' });\n          break;\n        }\n        case 'updateUnpublishedEntryStatus': {\n          const { collection, slug, newStatus } = body.params as UpdateUnpublishedEntryStatusParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const description = statusToLabel(newStatus);\n          await git.addConfig(branchDescription(cmsBranch), description);\n          res.json({ message: `${branch} description was updated to ${description}` });\n          break;\n        }\n        case 'publishUnpublishedEntry': {\n          const { collection, slug } = body.params as PublishUnpublishedEntryParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          await merge(git, cmsBranch, branch);\n          await git.deleteLocalBranch(cmsBranch);\n          res.json({ message: `branch ${cmsBranch} merged to ${branch}` });\n          break;\n        }\n        case 'getMedia': {\n          const { mediaFolder } = body.params as GetMediaParams;\n          const mediaFiles = await runOnBranch(git, branch, async () => {\n            const files = await listRepoFiles(repoPath, mediaFolder, '', 1);\n            const serializedFiles = await Promise.all(\n              files.map(file => readMediaFile(repoPath, file)),\n            );\n            return serializedFiles;\n          });\n          res.json(mediaFiles);\n          break;\n        }\n        case 'getMediaFile': {\n          const { path } = body.params as GetMediaFileParams;\n          const mediaFile = await runOnBranch(git, branch, () => {\n            return readMediaFile(repoPath, path);\n          });\n          res.json(mediaFile);\n          break;\n        }\n        case 'persistMedia': {\n          const {\n            asset,\n            options: { commitMessage },\n          } = body.params as PersistMediaParams;\n\n          const file = await runOnBranch(git, branch, async () => {\n            await writeFile(\n              path.join(repoPath, asset.path),\n              Buffer.from(asset.content, asset.encoding),\n            );\n            await commit(git, commitMessage);\n            return readMediaFile(repoPath, asset.path);\n          });\n          res.json(file);\n          break;\n        }\n        case 'deleteFile': {\n          const {\n            path: filePath,\n            options: { commitMessage },\n          } = body.params as DeleteFileParams;\n          await runOnBranch(git, branch, async () => {\n            await fs.unlink(path.join(repoPath, filePath));\n            await commit(git, commitMessage);\n          });\n          res.json({ message: `deleted file ${filePath}` });\n          break;\n        }\n        case 'getDeployPreview': {\n          res.json(null);\n          break;\n        }\n        default: {\n          const message = `Unknown action ${body.action}`;\n          res.status(422).json({ error: message });\n          break;\n        }\n      }\n    } catch (e) {\n      console.error(`Error handling ${JSON.stringify(req.body)}: ${e.message}`);\n      res.status(500).json({ error: 'Unknown error' });\n    }\n  };\n};\n\nexport const registerMiddleware = async (app: express.Express) => {\n  const repoPath = path.resolve(process.env.GIT_REPO_DIRECTORY || process.cwd());\n  await validateRepo({ repoPath });\n  app.post('/api/v1', joi(getSchema({ repoPath })));\n  app.post('/api/v1', localGitMiddleware({ repoPath }));\n  console.log(`Netlify CMS Git Proxy Server configured with ${repoPath}`);\n};\n","export const CMS_BRANCH_PREFIX = 'cms';\nexport const DEFAULT_PR_BODY = 'Automatically generated by Netlify CMS';\nexport const MERGE_COMMIT_MESSAGE = 'Automatically generated. Merged on Netlify CMS.';\n\nconst NETLIFY_CMS_LABEL_PREFIX = 'netlify-cms/';\nexport const isCMSLabel = (label: string) => label.startsWith(NETLIFY_CMS_LABEL_PREFIX);\nexport const labelToStatus = (label: string) => label.substr(NETLIFY_CMS_LABEL_PREFIX.length);\nexport const statusToLabel = (status: string) => `${NETLIFY_CMS_LABEL_PREFIX}${status}`;\n\nexport const generateContentKey = (collectionName: string, slug: string) =>\n  `${collectionName}/${slug}`;\n\nexport const parseContentKey = (contentKey: string) => {\n  const index = contentKey.indexOf('/');\n  return { collection: contentKey.substr(0, index), slug: contentKey.substr(index + 1) };\n};\n\nexport const contentKeyFromBranch = (branch: string) => {\n  return branch.substring(`${CMS_BRANCH_PREFIX}/`.length);\n};\n\nexport const branchFromContentKey = (contentKey: string) => {\n  return `${CMS_BRANCH_PREFIX}/${contentKey}`;\n};\n","module.exports = require(\"what-the-diff\");","module.exports = require(\"simple-git/promise\");","module.exports = require(\"crypto\");","import express from 'express';\nimport path from 'path';\nimport { defaultSchema, joi } from '../joi';\nimport { pathTraversal } from '../joi/customValidators';\nimport {\n  EntriesByFolderParams,\n  EntriesByFilesParams,\n  GetEntryParams,\n  PersistEntryParams,\n  GetMediaParams,\n  GetMediaFileParams,\n  PersistMediaParams,\n  DeleteFileParams,\n} from '../types';\nimport { listRepoFiles, deleteFile, writeFile, move } from '../utils/fs';\nimport { entriesFromFiles, readMediaFile } from '../utils/entries';\n\ntype Options = {\n  repoPath: string;\n};\n\nexport const localFsMiddleware = ({ repoPath }: Options) => {\n  return async function(req: express.Request, res: express.Response) {\n    try {\n      const { body } = req;\n\n      switch (body.action) {\n        case 'info': {\n          res.json({\n            repo: path.basename(repoPath),\n            // eslint-disable-next-line @typescript-eslint/camelcase\n            publish_modes: ['simple'],\n            type: 'local_fs',\n          });\n          break;\n        }\n        case 'entriesByFolder': {\n          const payload = body.params as EntriesByFolderParams;\n          const { folder, extension, depth } = payload;\n          const entries = await listRepoFiles(repoPath, folder, extension, depth).then(files =>\n            entriesFromFiles(\n              repoPath,\n              files.map(file => ({ path: file })),\n            ),\n          );\n          res.json(entries);\n          break;\n        }\n        case 'entriesByFiles': {\n          const payload = body.params as EntriesByFilesParams;\n          const entries = await entriesFromFiles(repoPath, payload.files);\n          res.json(entries);\n          break;\n        }\n        case 'getEntry': {\n          const payload = body.params as GetEntryParams;\n          const [entry] = await entriesFromFiles(repoPath, [{ path: payload.path }]);\n          res.json(entry);\n          break;\n        }\n        case 'persistEntry': {\n          const { entry, assets } = body.params as PersistEntryParams;\n          await writeFile(path.join(repoPath, entry.path), entry.raw);\n          // save assets\n          await Promise.all(\n            assets.map(a =>\n              writeFile(path.join(repoPath, a.path), Buffer.from(a.content, a.encoding)),\n            ),\n          );\n          if (entry.newPath) {\n            await move(path.join(repoPath, entry.path), path.join(repoPath, entry.newPath));\n          }\n          res.json({ message: 'entry persisted' });\n          break;\n        }\n        case 'getMedia': {\n          const { mediaFolder } = body.params as GetMediaParams;\n          const files = await listRepoFiles(repoPath, mediaFolder, '', 1);\n          const mediaFiles = await Promise.all(files.map(file => readMediaFile(repoPath, file)));\n          res.json(mediaFiles);\n          break;\n        }\n        case 'getMediaFile': {\n          const { path } = body.params as GetMediaFileParams;\n          const mediaFile = await readMediaFile(repoPath, path);\n          res.json(mediaFile);\n          break;\n        }\n        case 'persistMedia': {\n          const { asset } = body.params as PersistMediaParams;\n          await writeFile(\n            path.join(repoPath, asset.path),\n            Buffer.from(asset.content, asset.encoding),\n          );\n          const file = await readMediaFile(repoPath, asset.path);\n          res.json(file);\n          break;\n        }\n        case 'deleteFile': {\n          const { path: filePath } = body.params as DeleteFileParams;\n          await deleteFile(repoPath, filePath);\n          res.json({ message: `deleted file ${filePath}` });\n          break;\n        }\n        case 'getDeployPreview': {\n          res.json(null);\n          break;\n        }\n        default: {\n          const message = `Unknown action ${body.action}`;\n          res.status(422).json({ error: message });\n          break;\n        }\n      }\n    } catch (e) {\n      console.error(`Error handling ${JSON.stringify(req.body)}: ${e.message}`);\n      res.status(500).json({ error: 'Unknown error' });\n    }\n  };\n};\n\nexport const getSchema = ({ repoPath }: Options) => {\n  const schema = defaultSchema({ path: pathTraversal(repoPath) });\n  return schema;\n};\n\nexport const registerMiddleware = async (app: express.Express) => {\n  const repoPath = path.resolve(process.env.GIT_REPO_DIRECTORY || process.cwd());\n  app.post('/api/v1', joi(getSchema({ repoPath })));\n  app.post('/api/v1', localFsMiddleware({ repoPath }));\n  console.log(`Netlify CMS File System Proxy Server configured with ${repoPath}`);\n};\n","import express from 'express';\nimport { registerCommonMiddlewares } from './middlewares/common';\nimport { registerMiddleware as localGit } from './middlewares/localGit';\nimport { registerMiddleware as localFs } from './middlewares/localFs';\n\nexport const registerLocalGit = async (app: express.Express) => {\n  registerCommonMiddlewares(app);\n  await localGit(app);\n};\n\nexport const registerLocalFs = async (app: express.Express) => {\n  registerCommonMiddlewares(app);\n  await localFs(app);\n};\n"],"sourceRoot":""}