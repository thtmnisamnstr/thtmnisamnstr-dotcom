"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = downloadAssets;

var _path = _interopRequireDefault(require("path"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _figures = _interopRequireDefault(require("figures"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _request = _interopRequireDefault(require("request"));

var _getEntityName = _interopRequireDefault(require("contentful-batch-libs/dist/get-entity-name"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function downloadAsset(url, directory) {
  return new _bluebird.default(function (resolve, reject) {
    // build local file path from the url for the download
    var urlParts = url.split('//');

    var localFile = _path.default.join(directory, urlParts[urlParts.length - 1]); // ensure directory exists and create file stream


    _fsExtra.default.mkdirsSync(_path.default.dirname(localFile));

    var file = _fsExtra.default.createWriteStream(localFile); // handle urls without protocol


    if (url.startsWith('//')) {
      url = 'https:' + url;
    } // download asset


    var assetRequest = _request.default.get(url); // pipe response content to file


    assetRequest.on('error', err => {
      reject(err);
    }).on('response', response => {
      if (response.statusCode >= 400) {
        reject(new Error('error response status: ' + response.statusCode));
      }
    }).pipe(file).on('finish', () => resolve(localFile));
  });
}

function downloadAssets(options) {
  return (ctx, task) => {
    let successCount = 0;
    let warningCount = 0;
    let errorCount = 0;
    return _bluebird.default.map(ctx.data.assets, asset => {
      if (!asset.fields.file) {
        task.output = `${_figures.default.warning} asset ${(0, _getEntityName.default)(asset)} has no file(s)`;
        warningCount++;
        return;
      }

      const locales = Object.keys(asset.fields.file);
      return _bluebird.default.mapSeries(locales, locale => {
        const url = asset.fields.file[locale].url || asset.fields.file[locale].upload;
        return downloadAsset(url, options.exportDir).then(downLoadedFile => {
          task.output = `${_figures.default.tick} downloaded ${(0, _getEntityName.default)(downLoadedFile)} (${url})`;
          successCount++;
        }).catch(error => {
          task.output = `${_figures.default.cross} error downloading ${url}: ${error.message}`;
          errorCount++;
        });
      });
    }, {
      concurrency: 6
    }).then(() => {
      ctx.assetDownloads = {
        successCount,
        warningCount,
        errorCount
      };
    });
  };
}

module.exports = exports.default;